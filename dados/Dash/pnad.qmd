---
title: "PNADc - Renda"
format:
  html:
    toc: true
    number-sections: true
---

# Análises de Renda no Brasil pela PNAD Contínua Anual (2022-2024)

## Código

### Pacotes Utilizados

```{r packages, echo = TRUE, warning = FALSE, message = FALSE, results = 'hide'}
lapply(list("survey", "tidyverse", "PNADcIBGE", "future", "future.apply", "progressr", "data.table", "patchwork", "kableExtra"), function(x) {library(x, character.only = TRUE)})

```

```{r preparation, include = FALSE}
plan(multisession, workers = 9)
handlers("beepr", "txtprogressbar")

anos <- 2022:2024

variaveis_renomeadas <- c(
  Ano = "Ano",
  UF = "UF",
  V1008 = "domicílio", 
  V1014 = "entrevista",
  V1023 = "tipo", 
  #V1028 = "peso",
  V1032 = "peso",
  V2001 = "número_pessoas", 
  V2003 = "indivíduo", 
  V2005 = "condição",
  V2007 = "sexo",
  V20081 = "mês_nascimento", 
  V2009 = "idade", 
  V2010 = "cor_raça", 
  VD3004 = "nível_instrução", 
  VD3005 = "anos_estudo", 
  V4009 = "numero_trabalhos",
  V4039 = "horas_trabalho_principal",
  V4040 = "tempo_trabalho_principal",
  V40401 = "tempo_trabalho_principal.1",
  V40402 = "tempo_trabalho_principal.2",
  V40403 = "tempo_trabalho_principal.3",
  VD4008 = "posição_trabalho_principal",
  VD4013 = "horas_trabalhadas_faixa",
  VD4019 = "rendimento_habitual",
  VD4031 = "horas_trabalhadas",
  VD5010 = "rendimento_habitual_domicilio"
)
```

### Variáveis

```{r variables}

variaveis <- c("Ano", "UF", "V1008", "V1014", "V1023", "V1032", 
               "V2001", "V2003", "V2005", "V2007", "V20081", "V2009", "V2010", 
               "VD3004", "VD3005", 
               "V4009", "V4039", "V4040", "V40401", "V40402", "V40403", "VD4008", "VD4013", "VD4019", "VD4031", 
               "VD5010") 
```

### Funções

```{r function}
carregar_dados <- function(ano) {
  get_pnadc(year = ano, interview = 1, vars = variaveis, defyear = 2024)
}

calcula_media <- function(design) {
  design <- subset(design, cor_raça != "Ignorado")
  
  design <- update(design, 
                   Renda_dom = rendimento_habitual_domicilio * CO2,
                   Renda = rendimento_habitual * CO2) 
  
  renda_ano <- svyby(
    formula = ~Renda,
    by = ~interaction(sexo, cor_raça),  
    design = design,
    FUN = svymean,
    na.rm = TRUE
  )
  
  renda_ano <- renda_ano %>%
    rename(Categoria = `interaction(sexo, cor_raça)`) %>%
    mutate(Categoria = as.character(Categoria))
  
  renda_media <- svymean(x = ~Renda, design = design, na.rm = TRUE)
  
  renda_geral <- data.frame("Geral", coef(renda_media), SE(renda_media))
  colnames(renda_geral) <- colnames(renda_ano)  # garante consistência
  
  renda_ano <- rbind(renda_ano, renda_geral)
  rownames(renda_ano) <- NULL
  gc()
  return(renda_ano)
}

calcula_quartil <- function(dados) {
  dado <- dados
  dado <- subset(dado, !is.na(rendimento_habitual) & !is.na(sexo) & cor_raça != "Ignorado")
  
  dado <- transform(
    dado,
    Renda = rendimento_habitual * CO2, 
    Renda_dom = rendimento_habitual_domicilio * CO2, 
    Categoria = interaction(sexo, cor_raça)
  )
  
  quartis <- svyby(
    ~Renda,                      
    ~Categoria,                      
    dado,                       
    FUN = svyquantile,            
    quantiles = c(0.25, 0.5, 0.75)
  )
  
  dado_df <- as.data.frame(dado$variables)
  dado_df <- left_join(dado_df, quartis, by = "Categoria")
  
  quartil_geral <- svyquantile(
    x = ~Renda, 
    design = dado, 
    quantiles = c(0.25, 0.5, 0.75), 
    ci = FALSE
  )
  quartil_geral <- as.data.frame(quartil_geral[["Renda"]])
  
  renda_media <- svymean(~Renda, dado) 
  
  dado_df <- dado_df %>%
    select(Categoria, Renda, Renda.0.25, Renda.0.5, Renda.0.75) %>%
    mutate(Categoria = as.character(Categoria))
  
  media_geral <- data.frame(
    Categoria = "Geral",
    Renda = as.numeric(renda_media["Renda"]),
    Renda.0.25 = as.numeric(quartil_geral[1]),
    Renda.0.5 = as.numeric(quartil_geral[2]),
    Renda.0.75 = as.numeric(quartil_geral[3]),
    Quartil = case_when(
      as.numeric(renda_media["Renda"]) <= as.numeric(quartil_geral[1]) ~ "Q4",
      as.numeric(renda_media["Renda"]) <= as.numeric(quartil_geral[2]) ~ "Q3",
      as.numeric(renda_media["Renda"]) <= as.numeric(quartil_geral[3]) ~ "Q2",
      TRUE ~ "Q1"
    )
  )
  
  dado_df$Categoria <- factor(dado_df$Categoria)
  
  dado_df <- dado_df %>%
    mutate(
      Quartil = case_when(
        Renda <= Renda.0.25 ~ "Q4",            
        Renda <= Renda.0.5  ~ "Q3",            
        Renda <= Renda.0.75 ~ "Q2",            
        TRUE                ~ "Q1"
      )
    )
  
  dado_df <- full_join(dado_df, media_geral)
  
  dado_df$Renda <- as.numeric(dado_df$Renda)
  
  resultado <- dado_df %>%
    group_by(Categoria, Quartil) %>% 
    summarize(Media_Renda = mean(Renda)) %>%
    mutate(Quartil_Geral = case_when(
      Media_Renda <= as.numeric(quartil_geral[1]) ~ "q4",            
      Media_Renda <= as.numeric(quartil_geral[2]) ~ "q3",            
      Media_Renda <= as.numeric(quartil_geral[3]) ~ "q2",            
      TRUE ~ "q1"
    ))
  
  return(resultado)
}

# Função para reordenar categorias condicionalmente após pivot_wider
pivot_reorder <- function(data, ano, variavel, categoria, valor, vars_to_reorder, decrescente = TRUE) {
  
  ultimo_ano <- as.character(max(as.numeric(pull(data, {{ano}})), na.rm = TRUE))
  var_levels <- data %>% pull({{variavel}}) %>% unique()
  
  data %>%
    mutate(
      {{categoria}} := as.character({{categoria}})
    ) %>%
    pivot_wider(
      names_from = {{ano}},
      values_from = {{valor}}
    ) %>%
    group_by({{variavel}}) %>%
    mutate(
      {{categoria}} := if (first({{variavel}}) %in% vars_to_reorder) {
        fct_reorder(
          .data[[as.character(rlang::ensym(categoria))]],
          as.numeric(.data[[ultimo_ano]]),
          .desc = decrescente
        )
      } else {
        factor(
          .data[[as.character(rlang::ensym(categoria))]],
          levels = unique(.data[[as.character(rlang::ensym(categoria))]])
        )
      }
    ) %>%
    ungroup() %>%
    arrange(
      factor(.data[[as.character(rlang::ensym(variavel))]], levels = var_levels),
      .data[[as.character(rlang::ensym(categoria))]]
    )
}
```

```{r treatment, eval = FALSE, include = FALSE}

# CARREGAR DADOS

options(future.globals.maxSize = 15e+09)  # Define o limite para 15 GB

with_progress({
  p <- progressor(along = anos)
  
  dados <- future_lapply(anos, function(ano) {
    p()
    carregar_dados(ano)
  })
  names(dados) <- paste0("ano", anos)
})

gc()

# Nomear variáveis de interesse
for (i in seq_along(dados)) {
  for (variavel in names(variaveis_renomeadas)) {
    names(dados[[i]]$variables)[names(dados[[i]]$variables) == variavel] <- variaveis_renomeadas[[variavel]]
  }
}

dados_df <- bind_rows(lapply(dados, function(x) x$variables))

dados_df <- dados_df %>% 
  select(all_of(unname(variaveis_renomeadas))) %>% 
  mutate(ID = paste(Ano, domicílio, indivíduo, sep = "_"))

# CATEGORIAS

with_progress({
  p <- progressor(along = anos)
  
  res1 <- future_lapply(seq_along(anos), function(i) {
    calcula_media(dados[[i]])
  })
})

gc()

data <- res1 %>%
  bind_rows(.id = "Ano") %>%
  mutate(Ano = anos[as.integer(Ano)])

# QUARTIS

with_progress({
  p <- progressor(along = seq_along(dados))
  
  res2 <- future_lapply(seq_along(dados), function(i) {
    p()
    calcula_quartil(dados[[i]])
  })
})

data2 <- res2 %>%
  bind_rows(.id = "Ano")%>%
  mutate(Ano = anos[as.integer(Ano)])

data$Renda <- round(as.numeric(data$Renda), 2)
data2$Media_Renda <- round(data2$Media_Renda, 2)
```

```{r data, include = FALSE}
# SALVAR E CARREGAR DADOS

# save(list = ls(), file = "C:/Users/leona/OneDrive/Imagens/Documentos/GitHub/projetos/dados/saidas/dados_pnad.RData")
 load("C:/Users/leona/OneDrive/Imagens/Documentos/GitHub/projetos/dados/saidas/dados_pnad.RData")

# write.csv2(dados_df, "C:/Users/leona/OneDrive/Imagens/Documentos/GitHub/projetos/dados/saidas/dados_pnad.csv", row.names = FALSE)
```

## Gráficos

```{r graphics, include = FALSE}

grafico_categoria1 <- ggplot(data, aes(x = Ano, y = Renda, color = Categoria)) +
  geom_line(aes(size = ifelse(Categoria == "Geral", 2, .6))) +
  geom_point() +
  labs(x = NULL, y = "Renda Média", title = "Renda Média no Brasil por Cor e Sexo (1)") +
  scale_size_identity() + 
  scale_x_continuous(n.breaks = 3) +
  theme_minimal()

grafico_categoria2 <- ggplot(data, aes(x = Ano, y = Renda)) +
  geom_line() +
  geom_point() +
  geom_errorbar(aes(ymin = Renda - se, ymax = Renda + se), width = 0.2) +
  facet_wrap(~Categoria) +
  labs(x = NULL, y = "Renda Média", title = "Renda Média no Brasil por Cor e Sexo (2)") +
  scale_x_continuous(n.breaks = 3) +
  theme_bw() + theme(legend.position = "none")


categorias <- c("Homem.Branca", "Homem.Parda", "Homem.Preta", 
                "Mulher.Branca", "Mulher.Parda", "Mulher.Preta")

cores_quartil <- c("Q1" = "brown4", "Q2" = "burlywood4", "Q3" = "cadetblue4", "Q4" = "chartreuse4")

# Categoria Geral
quartil_geral <- ggplot(
  data2 %>% filter(Categoria == "Geral"),
  aes(x = Ano, y = Media_Renda, color = Quartil)) +
  geom_point(size = 2.5) +
  scale_color_manual(values = cores_quartil) +
  labs(x = NULL, y = NULL, title = "Geral") +
  scale_x_continuous(n.breaks = 3) +
  scale_y_continuous(limits = c(0, 6000), breaks = 3000) +
  theme_bw() +
  theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5, size = 12))

# Categorias de sexo e raça
plots_cat <- list()
for (i in seq_along(categorias)) {
  cat <- categorias[i]
  
  plots_cat[[i]] <- ggplot(data2 %>% filter(Categoria == cat), aes(x = Ano, y = Media_Renda, color = Quartil)) +
    geom_point(size = 1.5, shape = 18) +
    scale_color_manual(values = cores_quartil) +
    labs(title = gsub("\\.", " ", cat), x = NULL, y = NULL) +
    scale_x_continuous(n.breaks = 3) +
    scale_y_continuous(limits = c(0, 12000), breaks = c(2000, 6000, 10000)) +
    theme_bw() +
    theme(
      plot.title = element_text(hjust = 0.5, size = 10),
      axis.text.x = if (i >= 4) element_text() else element_blank(),
      axis.ticks.x = if (i >= 4) element_line() else element_blank(),
      axis.text.y = if (i %in% c(1, 4)) element_text() else element_blank(),
      axis.ticks.y = if (i %in% c(1, 4)) element_line() else element_blank()
    )
} 

# Formatar layout
quartil_categorias <- (plots_cat[[1]] | plots_cat[[2]] | plots_cat[[3]]) /
  (plots_cat[[4]] | plots_cat[[5]] | plots_cat[[6]])

grafico_quartil <- quartil_geral / quartil_categorias +
  plot_layout(guides = "collect")
```

### Análise Racial e de Gênero

```{r, echo = FALSE, warning = FALSE}

grafico_categoria1
```

```{r, echo = FALSE, warning = FALSE}

grafico_categoria2
```

### Renda Média dos Quartis por Categoria de Cor e Sexo

```{r, echo = FALSE, warning = FALSE}

grafico_quartil
```

## Tabela Descritiva

```{r table, include = FALSE}

dados_df <- dados_df %>%
  mutate(
    faixa_renda = case_when(
      is.na(rendimento_habitual) ~ NA_character_,
      rendimento_habitual <= 1500 ~ "Até 1500",
      rendimento_habitual <= 3000 ~ "1501 a 3000",
      TRUE ~ "Acima de 3000",
    ),
    numero_trabalhos = case_when(numero_trabalhos == "Um" ~ "Um", 
                                 numero_trabalhos %in% c("Dois", "Três ou mais") ~ "Dois ou mais"
    ),
    faixa_renda = factor(faixa_renda, levels = c("Até 1500", "1501 a 3000", "Acima de 3000")),
    # regex para remover os parênteses 
    posição_trabalho_principal = str_replace(posição_trabalho_principal, " \\(.*", "")
  )

variaveis_tabela <- c(
  "cor_raça" = "Cor ou Raça",
  "nível_instrução" = "Nível de Instrução",
  "numero_trabalhos" = "Número de Trabalhos",
  "posição_trabalho_principal" = "Posição no Trabalho Principal",
  "horas_trabalhadas_faixa" = "Faixa de Horas Trabalhadas",
  "faixa_renda" = "Faixa de Renda"
)

res3 <- list()

for (v in names(variaveis_tabela)) {
  res3[[v]] <- dados_df %>%
    filter(
      !is.na(.data[[v]]),
      !(v == "cor_raça" & .data[[v]] == "Ignorado")
    ) %>%
    group_by(Ano, categoria = .data[[v]]) %>%
    summarise(peso = sum(peso), .groups = "drop") %>%
    group_by(Ano) %>%
    mutate(
      valor = round(100 * peso / sum(peso), 2),
      categoria = as.factor(categoria),
      variavel = variaveis_tabela[[v]]  # aplica nome legível
    ) %>%
    select(Ano, variavel, categoria, valor)
}

tabela <- bind_rows(res3)

tabela_final <- pivot_reorder(tabela, Ano, variavel, categoria, valor, c("Cor/Raça", "Número de Trabalhos", "Posição no Trabalho Principal"), decrescente = TRUE)

data.table(tabela_final)

tab <- kable(
  tabela_final[, -1],
  format = "html",
  digits = 2,
  align = c("l", rep("c", ncol(tabela_final) - 2)),
  col.names = c("", setdiff(names(tabela_final), c("variavel", "categoria"))),  # remove nome da primeira coluna apenas
  caption = "Características Socioeconômicas do Brasil (Porcentagens)"
) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed"),
    full_width = FALSE,
    position = "center"
  ) %>%
  row_spec(0, bold = TRUE) %>%
  group_rows("Cor ou Raça", 1, 5) %>%
  group_rows("Nível de Instrução", 6, 12) %>%
  group_rows("Número de Trabalhos", 13, 14) %>%
  group_rows("Posição no Trabalho Principal", 15, 20) %>%
  group_rows("Faixa de Horas Trabalhadas", 21, 25) %>%
  group_rows("Faixa de Renda (R$)", 26, 28)
```

```{r, echo = FALSE}
tab
```

\
