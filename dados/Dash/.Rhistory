# Preencher apenas os valores após 2026-05-01 com a média móvel
expectativas <- expectativas %>%
mutate(
taxa_de_desocupacao = ifelse(
date >= as.Date("2026-05-01"),
rollapply(taxa_de_desocupacao, width = 12, FUN = mean, na.rm = TRUE
),
taxa_de_desocupacao
)
)
# 1. Mesclar dados e expectativas
data_treino <- merge(dados, expectativas)
View(data_treino)
# 1. Mesclar dados e expectativas
data_treino <- merge(dados %>% filter(date <= as.Date("2024-12-01")), expectativas)
# 2. Ajustar modelos de regressão linear
lm_model_FBCF <- lm(FBCF.dessaz ~ Câmbio + ipca + taxa_de_desocupacao, data = data_treino, na.action = na.exclude)
lm_model_PIB_precos_de_mercado <- lm(PIB_precos_de_mercado.dessaz ~ Câmbio + ipca + taxa_de_desocupacao, data = data_treino, na.action = na.exclude)
# Adicionar a nova linha ao dataframe expectativas_futuras
expectativas_futuras <- expectativas_futuras %>%
bind_rows(
data.frame(
date = as.Date("2025-01-01"),
FBCF_proj = dados$FBCF.dessaz[dados$date == "2025-05-01"], #185.5298
PIB_precos_de_mercado_proj = dados$PIB_precos_de_mercado.dessaz[dados$date == "2025-01-01"], #191.161
Câmbio = NA,
ipca = NA,
taxa_de_desocupacao = NA
)
)
expectativas_futuras <- expectativas %>% filter(date >= "2025-01-01")
expectativas_futuras$FBCF_proj <- predict(lm_model_FBCF, newdata = expectativas_futuras)
expectativas_futuras$PIB_precos_de_mercado_proj <- predict(lm_model_PIB_precos_de_mercado, newdata = expectativas_futuras)
# Adicionar a nova linha ao dataframe expectativas_futuras
expectativas_futuras <- expectativas_futuras %>%
bind_rows(
data.frame(
date = as.Date("2025-01-01"),
FBCF_proj = dados$FBCF.dessaz[dados$date == "2025-05-01"], #185.5298
PIB_precos_de_mercado_proj = dados$PIB_precos_de_mercado.dessaz[dados$date == "2025-01-01"], #191.161
Câmbio = NA,
ipca = NA,
taxa_de_desocupacao = NA
)
)
View(dados)
dados$FBCF.dessaz[dados$date == "2025-05-01"]
# Adicionar a nova linha ao dataframe expectativas_futuras
expectativas_futuras <- expectativas_futuras %>%
bind_rows(
data.frame(
date = as.Date("2025-01-01"),
FBCF_proj = dados$FBCF.dessaz[dados$date == "2025-01-01"], #185.5298
PIB_precos_de_mercado_proj = dados$PIB_precos_de_mercado.dessaz[dados$date == "2025-01-01"], #191.161
Câmbio = NA,
ipca = NA,
taxa_de_desocupacao = NA
)
)
# Calcular o R² Ajustado para os modelos
r2_adj_FBCF <- summary(lm_model_FBCF)$adj.r.squared
r2_adj_PIB <- summary(lm_model_PIB_precos_de_mercado)$adj.r.squared
grafico_projecoes <- ggplot(dados, aes(x = date)) +
# Linhas históricas
geom_line(aes(y = reindexar(FBCF.dessaz, dados, "2025-01-01"), color = "FBCF"), linewidth = 0.8, alpha = 1) +
geom_line(aes(y = reindexar(PIB_precos_de_mercado.dessaz, dados, "2025-01-01"), color = "PIB"), linewidth = 0.8, alpha = 1) +
# Linhas de projeção
geom_line(data = expectativas_futuras, aes(y = reindexar(FBCF_proj, expectativas_futuras, "2025-01-01"), color = "FBCF"), linetype = "F1", alpha = 0.8, linewidth = 1) +
geom_line(data = expectativas_futuras, aes(y = reindexar(PIB_precos_de_mercado_proj, expectativas_futuras, "2025-01-01"), color = "PIB"), linetype = "F1", alpha = 0.8, linewidth = 1) +
# Adicionar estatísticas de R² Ajustado
annotate("text", x = as.Date("2027-01-01"), y = 102, label = paste("R² Ajustado PIB:", round(r2_adj_PIB, 3)), color = "saddlebrown") +
labs(
title = "Projeções de FBCF e PIB",
x = NULL, y = "01.25 = 100"
) +
theme_minimal() +
theme(legend.position = "bottom") +
scale_x_date(
date_labels = "%m.%y",
date_breaks = "3 months",
limits = c(as.Date("2022-01-01"), max(expectativas_futuras$date))
) +
scale_color_manual(
values = c("FBCF" = "darkgreen", "PIB" = "saddlebrown"),
guide = guide_legend(title = NULL)  # Remove o título da legenda
) +
scale_y_continuous(
limits = c(87.5, 102.5),
breaks = c(90, 95, 100)
)
print(grafico_projecoes)
View(dados)
lapply(c(
"tidyverse",
"rbcb",
"ipeadatar",
"cowplot",
"scales",
"zoo"
),
function(x)
library(x, character.only = T))
### CARREGAMENTO E PROCESSAMENTO DOS DADOS
ipea <- ipeadata(c("GAC12_INDFBCF12",  "GAC12_INDFBCFDESSAZ12", "BM366_TJOVER366", "SGS12_IBCBRDESSAZ12", "PRECOS12_IPCAG12")) %>%
pivot_wider(names_from = code, values_from = value) %>%
dplyr::select(-uname, -tcode) %>%
rename(FBCF = "GAC12_INDFBCF12", FBCF.dessaz = "GAC12_INDFBCFDESSAZ12", juros = "BM366_TJOVER366", ibc_br = "SGS12_IBCBRDESSAZ12", IPCA = "PRECOS12_IPCAG12") %>%
filter(date >= "2001-01-01") %>%
mutate(date = as.Date(date))
# Monitor do PIB
monitor_pib <- read.csv2("C:/Users/leona/OneDrive/Imagens/Documentos/GitHub/projetos/dados/bases/monitor_pib.csv")
expectativas <- get_market_expectations(
"monthly",
indic = c("Câmbio", "IPCA", "Taxa de desocupação"),
start_date = "2001-01-01",
`$filter` = "baseCalculo eq 0",
`$select` = "Indicador,Data,DataReferencia,Mediana"
)
# Variáveis adicionais para a análise
variaveis <- c(indicador_custo_credito = 25351,
taxa_juros_credito = 20714,
selic = 4189,
saldo_carteira_credito = 20539,
concessoes_de_credito = 20631,
cambio_real_efetivo = 11752,
resultado_primario_12_meses = 5793,
producao_bens_de_capital.dessaz = 28506,
utilizacao_da_capacidade_instalada_ind_trans.dessaz = 28561
)
# Carregar as séries dos bacen
bacen <- get_series(variaveis, start_date = "2001-01-01")
bacen <- reduce(bacen, full_join, by = "date")
### TRATAMENTO
monitor_pib <- monitor_pib %>%
mutate(date = paste0("01/", Data),
date = as.Date(date, format = "%d/%b/%y"))
expectativas <- expectativas %>%
pivot_wider(names_from = Indicador, values_from = Mediana) %>%
rename(ipca = IPCA,
taxa_de_desocupacao = `Taxa de desocupação`,
date = DataReferencia) %>%
mutate(date = as.Date(paste0("01/", date), format = "%d/%m/%Y")) %>%
group_by(date) %>%
summarise(
Câmbio = mean(Câmbio, na.rm = TRUE),
ipca = mean(ipca, na.rm = TRUE),
taxa_de_desocupacao = mean(taxa_de_desocupacao, na.rm = TRUE)) %>%
arrange(desc(date)
)
# Mesclando todos os dados
dados <- ipea %>% inner_join(bacen) %>% inner_join(monitor_pib) %>% arrange(date)
dados <- dados %>% filter(date <= "2021-01-01")
### FUNÇÕES UTILIZADAS
options(scipen = 999)
# Função para padronizar variáveis
padronizar <- function(x) {
(x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE)
}
# Função para reindexar variáveis com base em uma data específica
reindexar <- function(x, data, data_base) {
valor_base <- x[data$date == data_base]
# Divide apenas os valores a partir da data inicial
(x / valor_base) * 100
}
# FBCF e PIB
#Gráfico 1: FBCF e Capacidade Instalada padronizados
grafico_fbcf.uci <- ggplot(dados, aes(x = date)) +
geom_line(aes(y = padronizar(FBCF.dessaz), color = "FBCF")) +
geom_line(aes(y = padronizar(utilizacao_da_capacidade_instalada_ind_trans.dessaz), color = "Utilização da Capacidade Instalada")) +
scale_color_manual(values = c("slateblue", "saddlebrown")) +
labs(title = "FBCF e Utilização da Capacidade Instalada Padronizados",
x = "Data", y = NULL, color = "") +
theme_minimal() +
theme(legend.position = "top")
#Gráfico 2: PIB, Produção de Bens de Capital, Câmbio, FBCF
grafico_fbcf.cambio <- ggplot(dados, aes(x = date)) +
geom_line(aes(y = reindexar(PIB_precos_de_mercado.dessaz, dados, "2002-01-01"), color = "PIB")) +
geom_line(aes(y = reindexar(producao_bens_de_capital.dessaz, dados, "2002-01-01"), color = "Produção Bens de Capital")) +
geom_line(aes(y = reindexar(cambio_real_efetivo, dados, "2002-01-01"), color = "Câmbio Real")) +
geom_line(aes(y = reindexar(FBCF.dessaz, dados, "2002-01-01"), color = "FBCF")) +
scale_color_manual(values = c("slateblue", "saddlebrown", "forestgreen", "lightcoral")) +
labs(title = "Como o câmbio afetou a atividade?",
x = "Data", y = "2002 = 100", color = "") +
theme_minimal() +
theme(legend.position = "top")
# Gráfico 3: ICC, Selic e FBCF, PIB, Crédito
grafico_selic <- ggplot(dados %>% filter (date >= "2010-01-01"), aes(x = date)) +
geom_line(aes(y = indicador_custo_credito, color = "Indicador Custo Crédito")) +
geom_line(aes(y = selic, color = "Selic")) +
scale_color_manual(values = c("lightcoral", "#008080")) +
labs(x = "Data", y = NULL, colour = "", title = "Como os juros SELIC e o custo do crédito afetam a atividade?") +
theme_minimal() +
theme(legend.position = "top")
grafico_credito <- ggplot(dados, aes(x = date)) +
geom_line(aes(y = reindexar(FBCF, dados, "2011-03-01"), color = "FBCF")) +
geom_line(aes(y = reindexar(PIB_precos_de_mercado, dados, "2011-03-01"), color = "PIB")) +
geom_line(aes(y = reindexar(concessoes_de_credito, dados, "2011-03-01"), color = "Novas Concessões de Crédito")) +
scale_color_manual(values = c("darkgreen", "saddlebrown", "darkorange")) +
scale_x_date(limits = c(as.Date("2010-01-01"), max(dados$date))) +
labs(x = "Data", y = "2011 = 100", color = "") +
theme_minimal() +
theme(legend.position = "top")
# Correlações:
cat("FBCF e UCI:", cor(dados$FBCF.dessaz, dados$producao_bens_de_capital.dessaz, use = "complete.obs"))
cat("FBCF e PIB:", cor(dados$FBCF.dessaz, dados$PIB_precos_de_mercado.dessaz, use = "complete.obs"))
cat("FBCF e Bens de Capital:", cor(dados$FBCF.dessaz, dados$producao_bens_de_capital.dessaz, use = "complete.obs"))
cat("Bens de Capital e Câmbio:", cor(dados$producao_bens_de_capital.dessaz, dados$cambio_real_efetivo, use = "complete.obs"))
cat("Custo de Crédito e Concessões de Crédito:", cor(dados$indicador_custo_credito, dados$concessoes_de_credito, use = "complete.obs"))
print(grafico_fbcf.uci)
print(grafico_fbcf.cambio)
plot_grid(grafico_selic, grafico_credito, nrow = 2)
lapply(c(
"tidyverse",
"rbcb",
"ipeadatar",
"cowplot",
"scales",
"zoo"
),
function(x)
library(x, character.only = T))
### CARREGAMENTO E PROCESSAMENTO DOS DADOS
ipea <- ipeadata(c("GAC12_INDFBCF12",  "GAC12_INDFBCFDESSAZ12", "BM366_TJOVER366", "SGS12_IBCBRDESSAZ12", "PRECOS12_IPCAG12")) %>%
pivot_wider(names_from = code, values_from = value) %>%
dplyr::select(-uname, -tcode) %>%
rename(FBCF = "GAC12_INDFBCF12", FBCF.dessaz = "GAC12_INDFBCFDESSAZ12", juros = "BM366_TJOVER366", ibc_br = "SGS12_IBCBRDESSAZ12", IPCA = "PRECOS12_IPCAG12") %>%
filter(date >= "2001-01-01") %>%
mutate(date = as.Date(date))
# Monitor do PIB
monitor_pib <- read.csv2("C:/Users/leona/OneDrive/Imagens/Documentos/GitHub/projetos/dados/bases/monitor_pib.csv")
expectativas <- get_market_expectations(
"monthly",
indic = c("Câmbio", "IPCA", "Taxa de desocupação"),
start_date = "2001-01-01",
`$filter` = "baseCalculo eq 0",
`$select` = "Indicador,Data,DataReferencia,Mediana"
)
# Variáveis adicionais para a análise
variaveis <- c(indicador_custo_credito = 25351,
taxa_juros_credito = 20714,
selic = 4189,
saldo_carteira_credito = 20539,
concessoes_de_credito = 20631,
cambio_real_efetivo = 11752,
resultado_primario_12_meses = 5793,
producao_bens_de_capital.dessaz = 28506,
utilizacao_da_capacidade_instalada_ind_trans.dessaz = 28561
)
# Carregar as séries dos bacen
bacen <- get_series(variaveis, start_date = "2001-01-01")
bacen <- reduce(bacen, full_join, by = "date")
### TRATAMENTO
monitor_pib <- monitor_pib %>%
mutate(date = paste0("01/", Data),
date = as.Date(date, format = "%d/%b/%y"))
expectativas <- expectativas %>%
pivot_wider(names_from = Indicador, values_from = Mediana) %>%
rename(ipca = IPCA,
taxa_de_desocupacao = `Taxa de desocupação`,
date = DataReferencia) %>%
mutate(date = as.Date(paste0("01/", date), format = "%d/%m/%Y")) %>%
group_by(date) %>%
summarise(
Câmbio = mean(Câmbio, na.rm = TRUE),
ipca = mean(ipca, na.rm = TRUE),
taxa_de_desocupacao = mean(taxa_de_desocupacao, na.rm = TRUE)) %>%
arrange(desc(date)
)
# Mesclando todos os dados
dados <- ipea %>% inner_join(bacen) %>% inner_join(monitor_pib) %>% arrange(date)
dados <- dados %>% filter(date <= "2024-12-01")
### FUNÇÕES UTILIZADAS
options(scipen = 999)
# Função para padronizar variáveis
padronizar <- function(x) {
(x - mean(x, na.rm = TRUE)) / sd(x, na.rm = TRUE)
}
# Função para reindexar variáveis com base em uma data específica
reindexar <- function(x, data, data_base) {
valor_base <- x[data$date == data_base]
# Divide apenas os valores a partir da data inicial
(x / valor_base) * 100
}
# FBCF e PIB
#Gráfico 1: FBCF e Capacidade Instalada padronizados
grafico_fbcf.uci <- ggplot(dados, aes(x = date)) +
geom_line(aes(y = padronizar(FBCF.dessaz), color = "FBCF")) +
geom_line(aes(y = padronizar(utilizacao_da_capacidade_instalada_ind_trans.dessaz), color = "Utilização da Capacidade Instalada")) +
scale_color_manual(values = c("slateblue", "saddlebrown")) +
labs(title = "FBCF e Utilização da Capacidade Instalada Padronizados",
x = "Data", y = NULL, color = "") +
theme_minimal() +
theme(legend.position = "top")
#Gráfico 2: PIB, Produção de Bens de Capital, Câmbio, FBCF
grafico_fbcf.cambio <- ggplot(dados, aes(x = date)) +
geom_line(aes(y = reindexar(PIB_precos_de_mercado.dessaz, dados, "2002-01-01"), color = "PIB")) +
geom_line(aes(y = reindexar(producao_bens_de_capital.dessaz, dados, "2002-01-01"), color = "Produção Bens de Capital")) +
geom_line(aes(y = reindexar(cambio_real_efetivo, dados, "2002-01-01"), color = "Câmbio Real")) +
geom_line(aes(y = reindexar(FBCF.dessaz, dados, "2002-01-01"), color = "FBCF")) +
scale_color_manual(values = c("slateblue", "saddlebrown", "forestgreen", "lightcoral")) +
labs(title = "Como o câmbio afetou a atividade?",
x = "Data", y = "2002 = 100", color = "") +
theme_minimal() +
theme(legend.position = "top")
# Gráfico 3: ICC, Selic e FBCF, PIB, Crédito
grafico_selic <- ggplot(dados %>% filter (date >= "2010-01-01"), aes(x = date)) +
geom_line(aes(y = indicador_custo_credito, color = "Indicador Custo Crédito")) +
geom_line(aes(y = selic, color = "Selic")) +
scale_color_manual(values = c("lightcoral", "#008080")) +
labs(x = "Data", y = NULL, colour = "", title = "Como os juros SELIC e o custo do crédito afetam a atividade?") +
theme_minimal() +
theme(legend.position = "top")
grafico_credito <- ggplot(dados, aes(x = date)) +
geom_line(aes(y = reindexar(FBCF, dados, "2011-03-01"), color = "FBCF")) +
geom_line(aes(y = reindexar(PIB_precos_de_mercado, dados, "2011-03-01"), color = "PIB")) +
geom_line(aes(y = reindexar(concessoes_de_credito, dados, "2011-03-01"), color = "Novas Concessões de Crédito")) +
scale_color_manual(values = c("darkgreen", "saddlebrown", "darkorange")) +
scale_x_date(limits = c(as.Date("2010-01-01"), max(dados$date))) +
labs(x = "Data", y = "2011 = 100", color = "") +
theme_minimal() +
theme(legend.position = "top")
# Correlações:
cat("FBCF e UCI:", cor(dados$FBCF.dessaz, dados$producao_bens_de_capital.dessaz, use = "complete.obs"))
cat("FBCF e PIB:", cor(dados$FBCF.dessaz, dados$PIB_precos_de_mercado.dessaz, use = "complete.obs"))
cat("FBCF e Bens de Capital:", cor(dados$FBCF.dessaz, dados$producao_bens_de_capital.dessaz, use = "complete.obs"))
cat("Bens de Capital e Câmbio:", cor(dados$producao_bens_de_capital.dessaz, dados$cambio_real_efetivo, use = "complete.obs"))
cat("Custo de Crédito e Concessões de Crédito:", cor(dados$indicador_custo_credito, dados$concessoes_de_credito, use = "complete.obs"))
print(grafico_fbcf.uci)
print(grafico_fbcf.cambio)
plot_grid(grafico_selic, grafico_credito, nrow = 2)
### PROJEÇÃO (FBCF e PIB)
# 0. Preencher valores faltantes
# Preencher apenas os valores após 2026-05-01 com a média móvel
expectativas <- expectativas %>%
mutate(
taxa_de_desocupacao = ifelse(
date >= as.Date("2026-05-01"),
rollapply(taxa_de_desocupacao, width = 12, FUN = mean, na.rm = TRUE
),
taxa_de_desocupacao
)
)
# 1. Mesclar dados e expectativas
data_treino <- merge(dados %>% date), expectativas)
# 2. Ajustar modelos de regressão linear
lm_model_FBCF <- lm(FBCF.dessaz ~ Câmbio + ipca + taxa_de_desocupacao, data = data_treino, na.action = na.exclude)
lm_model_PIB_precos_de_mercado <- lm(PIB_precos_de_mercado.dessaz ~ Câmbio + ipca + taxa_de_desocupacao, data = data_treino, na.action = na.exclude)
# 3. Fazer projeções a partir de 2025 em diante
expectativas_futuras <- expectativas %>% filter(date >= "2025-01-01")
expectativas_futuras$FBCF_proj <- predict(lm_model_FBCF, newdata = expectativas_futuras)
expectativas_futuras$PIB_precos_de_mercado_proj <- predict(lm_model_PIB_precos_de_mercado, newdata = expectativas_futuras)
# 4. Conectar dados históricos e projeções
# Adicionar a nova linha ao dataframe expectativas_futuras
expectativas_futuras <- expectativas_futuras %>%
bind_rows(
data.frame(
date = as.Date("2025-01-01"),
FBCF_proj = dados$FBCF.dessaz[dados$date == "2025-01-01"], #185.5298
PIB_precos_de_mercado_proj = dados$PIB_precos_de_mercado.dessaz[dados$date == "2025-01-01"], #191.161
Câmbio = NA,
ipca = NA,
taxa_de_desocupacao = NA
)
)
dados$FBCF.dessaz[dados$date == "2024-12-01"]
dados$PIB_precos_de_mercado.dessaz[dados$date == "2024-012-01"]
dados$PIB_precos_de_mercado.dessaz[dados$date == "2024-12-01"]
# Adicionar a nova linha ao dataframe expectativas_futuras
expectativas_futuras <- expectativas_futuras %>%
bind_rows(
data.frame(
date = as.Date("2024-12-01"),
FBCF_proj = dados$FBCF.dessaz[dados$date == "2024-12-01"], #178.964
PIB_precos_de_mercado_proj = dados$PIB_precos_de_mercado.dessaz[dados$date == "2024-12-01"], #191.306
Câmbio = NA,
ipca = NA,
taxa_de_desocupacao = NA
)
)
# Calcular o R² Ajustado para os modelos
r2_adj_FBCF <- summary(lm_model_FBCF)$adj.r.squared
r2_adj_PIB <- summary(lm_model_PIB_precos_de_mercado)$adj.r.squared
#5. Plotar os dados históricos e projeções
grafico_projecoes <- ggplot(dados, aes(x = date)) +
# Linhas históricas
geom_line(aes(y = reindexar(FBCF.dessaz, dados, "2025-01-01"), color = "FBCF"), linewidth = 0.8, alpha = 1) +
geom_line(aes(y = reindexar(PIB_precos_de_mercado.dessaz, dados, "2025-01-01"), color = "PIB"), linewidth = 0.8, alpha = 1) +
# Linhas de projeção
geom_line(data = expectativas_futuras, aes(y = reindexar(FBCF_proj, expectativas_futuras, "2025-01-01"), color = "FBCF"), linetype = "F1", alpha = 0.8, linewidth = 1) +
geom_line(data = expectativas_futuras, aes(y = reindexar(PIB_precos_de_mercado_proj, expectativas_futuras, "2025-01-01"), color = "PIB"), linetype = "F1", alpha = 0.8, linewidth = 1) +
# Adicionar estatísticas de R² Ajustado
annotate("text", x = as.Date("2027-01-01"), y = 102, label = paste("R² Ajustado PIB:", round(r2_adj_PIB, 3)), color = "saddlebrown") +
labs(
title = "Projeções de FBCF e PIB",
x = NULL, y = "01.25 = 100"
) +
theme_minimal() +
theme(legend.position = "bottom") +
scale_x_date(
date_labels = "%m.%y",
date_breaks = "3 months",
limits = c(as.Date("2022-01-01"), max(expectativas_futuras$date))
) +
scale_color_manual(
values = c("FBCF" = "darkgreen", "PIB" = "saddlebrown"),
guide = guide_legend(title = NULL)  # Remove o título da legenda
) +
scale_y_continuous(
limits = c(87.5, 102.5),
breaks = c(90, 95, 100)
)
print(grafico_projecoes)
grafico_projecoes <- ggplot(dados, aes(x = date)) +
# Linhas históricas
geom_line(aes(y = reindexar(FBCF.dessaz, dados, "2025-01-01"), color = "FBCF"), linewidth = 0.8, alpha = 1) +
geom_line(aes(y = reindexar(PIB_precos_de_mercado.dessaz, dados, "2025-01-01"), color = "PIB"), linewidth = 0.8, alpha = 1) +
# Linhas de projeção
geom_line(data = expectativas_futuras, aes(y = reindexar(FBCF_proj, expectativas_futuras, "2025-01-01"), color = "FBCF"), linetype = "F1", alpha = 0.8, linewidth = 1) +
geom_line(data = expectativas_futuras, aes(y = reindexar(PIB_precos_de_mercado_proj, expectativas_futuras, "2025-01-01"), color = "PIB"), linetype = "F1", alpha = 0.8, linewidth = 1) +
# Adicionar estatísticas de R² Ajustado
annotate("text", x = as.Date("2027-01-01"), y = 102, label = paste("R² Ajustado PIB:", round(r2_adj_PIB, 3)), color = "saddlebrown") +
labs(
title = "Projeções de FBCF e PIB",
x = NULL, y = "01.25 = 100"
) +
theme_minimal() +
theme(legend.position = "bottom") +
scale_x_date(
date_labels = "%m.%y",
date_breaks = "3 months",
limits = c(as.Date("2022-01-01"), max(expectativas_futuras$date))
) +
scale_color_manual(
values = c("FBCF" = "darkgreen", "PIB" = "saddlebrown"),
guide = guide_legend(title = NULL)  # Remove o título da legenda
) +
scale_y_continuous(
limits = c(87.5, 102.5),
breaks = c(90, 95, 100)
)
print(grafico_projecoes)
### PROJEÇÃO (FBCF e PIB)
# 0. Preencher valores faltantes
# Preencher apenas os valores após 2026-05-01 com a média móvel
expectativas <- expectativas %>%
mutate(
taxa_de_desocupacao = ifelse(
date >= as.Date("2026-05-01"),
rollapply(taxa_de_desocupacao, width = 12, FUN = mean, na.rm = TRUE
),
taxa_de_desocupacao
)
)
# 1. Mesclar dados e expectativas
data_treino <- merge(dados, expectativas)
# 2. Ajustar modelos de regressão linear
lm_model_FBCF <- lm(FBCF.dessaz ~ Câmbio + ipca + taxa_de_desocupacao, data = data_treino, na.action = na.exclude)
lm_model_PIB_precos_de_mercado <- lm(PIB_precos_de_mercado.dessaz ~ Câmbio + ipca + taxa_de_desocupacao, data = data_treino, na.action = na.exclude)
# 3. Fazer projeções a partir de 2025 em diante
expectativas_futuras <- expectativas %>% filter(date >= "2025-01-01")
expectativas_futuras$FBCF_proj <- predict(lm_model_FBCF, newdata = expectativas_futuras)
expectativas_futuras$PIB_precos_de_mercado_proj <- predict(lm_model_PIB_precos_de_mercado, newdata = expectativas_futuras)
# 4. Conectar dados históricos e projeções
# Adicionar a nova linha ao dataframe expectativas_futuras
expectativas_futuras <- expectativas_futuras %>%
bind_rows(
data.frame(
date = as.Date("2024-12-01"),
FBCF_proj = dados$FBCF.dessaz[dados$date == "2024-12-01"], #178.964
PIB_precos_de_mercado_proj = dados$PIB_precos_de_mercado.dessaz[dados$date == "2024-12-01"], #191.306
Câmbio = NA,
ipca = NA,
taxa_de_desocupacao = NA
)
)
# Calcular o R² Ajustado para os modelos
r2_adj_FBCF <- summary(lm_model_FBCF)$adj.r.squared
r2_adj_PIB <- summary(lm_model_PIB_precos_de_mercado)$adj.r.squared
#5. Plotar os dados históricos e projeções
grafico_projecoes <- ggplot(dados, aes(x = date)) +
# Linhas históricas
geom_line(aes(y = reindexar(FBCF.dessaz, dados, "2024-12-01"), color = "FBCF"), linewidth = 0.8, alpha = 1) +
geom_line(aes(y = reindexar(PIB_precos_de_mercado.dessaz, dados, "2024-12-01"), color = "PIB"), linewidth = 0.8, alpha = 1) +
# Linhas de projeção
geom_line(data = expectativas_futuras, aes(y = reindexar(FBCF_proj, expectativas_futuras, "2024-12-01"), color = "FBCF"), linetype = "F1", alpha = 0.8, linewidth = 1) +
geom_line(data = expectativas_futuras, aes(y = reindexar(PIB_precos_de_mercado_proj, expectativas_futuras, "2024-12-01"), color = "PIB"), linetype = "F1", alpha = 0.8, linewidth = 1) +
# Adicionar estatísticas de R² Ajustado
annotate("text", x = as.Date("2027-01-01"), y = 102, label = paste("R² Ajustado PIB:", round(r2_adj_PIB, 3)), color = "saddlebrown") +
labs(
title = "Projeções de FBCF e PIB",
x = NULL, y = "2024 = 100"
) +
theme_minimal() +
theme(legend.position = "bottom") +
scale_x_date(
date_labels = "%m.%y",
date_breaks = "3 months",
limits = c(as.Date("2022-01-01"), max(expectativas_futuras$date))
) +
scale_color_manual(
values = c("FBCF" = "darkgreen", "PIB" = "saddlebrown"),
guide = guide_legend(title = NULL)  # Remove o título da legenda
) +
scale_y_continuous(
limits = c(87.5, 102.5),
breaks = c(90, 95, 100)
)
print(grafico_projecoes)
load("C:/Users/leona/OneDrive/Imagens/Documentos/GitHub/projetos/.RData")
load("C:/Users/leona/OneDrive/Imagens/Documentos/GitHub/projetos/dados/Dash/.RData")
load("C:/Users/leona/OneDrive/Imagens/Documentos/GitHub/projetos/dados/Dash/.RData")
load("C:/Users/leona/OneDrive/Imagens/Documentos/GitHub/projetos/dados/Dash/.RData")
